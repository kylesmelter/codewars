Challenge 101

The two oldest ages function/method needs to be completed. 
It should take an array of numbers as its argument and return the two highest numbers within the array. 
The returned value should be an array in the format [second oldest age, oldest age].

The order of the numbers passed in could be any order. 
The array will always include at least 2 items. 
If there are two or more oldest age, then return both of them in array format.

For example (Input --> Output):

[1, 2, 10, 8] --> [8, 10]
[1, 5, 87, 45, 8, 8] --> [45, 87]
[1, 3, 10, 0]) --> [3, 10]


Answer:

function twoOldestAges(ages){
  let sorted = ages.sort((a,b) => a - b);
  return sorted.slice(-2)
}

------------------------------------------------------------

Challenge 102

Task
Given a string str, reverse it and omit all non-alphabetic characters.

Example
For str = "krishan", the output should be "nahsirk".

For str = "ultr53o?n", the output should be "nortlu".

Input/Output
[input] string str
A string consists of lowercase latin letters, digits and symbols.

[output] a string


Answer:

function reverseLetter(str) {
  //coding and coding..
      let result = [];
    let array = str.split('');
    for(let i = 0; i <= array.length - 1; i++) {
        if(array[i] >= 'a' && array[i] <= 'z') {
            result.push(array[i]);
        }
    }
    return result.reverse().join('');
  
}

----------------------------------------------------------

Challenge 103

Your task is to remove all duplicate words from a string, leaving only single (first) words entries.

Example:

Input:

'alpha beta beta gamma gamma gamma delta alpha beta beta gamma gamma gamma delta'

Output:

'alpha beta gamma delta'


Answer:

function removeDuplicateWords (s) {
    let array = s.split(' ');
    let set = new Set(array);
    console.log([...set].join(' '));
}

----------------------------------------------------------

Challenge 104

It's bonus time in the big city! The fatcats are rubbing their paws in anticipation... but who is going to make the most money?

Build a function that takes in two arguments (salary, bonus). Salary will be an integer, and bonus a boolean.

If bonus is true, the salary should be multiplied by 10. If bonus is false, 
the fatcat did not make enough money and must receive only his stated salary.

Return the total figure the individual will receive as a string prefixed with "£" 
(= "\u00A3", JS, Go, Java and Julia), "$" (C#, C++, Ruby, Clojure, Elixir, PHP, Python, Haskell and Lua) or "¥" (Rust).


Answer:

function bonusTime(salary, bonus) {
return bonus === true ? '£' + salary * 10 : '£' + salary;
}

-------------------------------------------------------------

Challenge 105

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in. 
Additionally, if the number is negative, return 0 (for languages that do have them).

Note: If the number is a multiple of both 3 and 5, only count it once.

Courtesy of projecteuler.net (Problem 1)

function solution(number){
  let result = [];
  for(let i = 0; i < number; i++) {
    if(number < 0) {
      return 0;
    } else if(i % 3 === 0 && i % 5 === 0) {
      result.push(i);
    } else if(i % 3 === 0) {
      result.push(i);
    } else if(i % 5 === 0) {
      result.push(i)
    }
  }
  return result.reduce((acc,c) => acc + c, 0);
}

----------------------------------------------------------

Challenge 106

You probably know the "like" system from Facebook and other pages. 
People can "like" blog posts, pictures or other items. We want to create the text that should be displayed next to such an item.

Implement the function which takes an array containing the names of people that like an item. 
It must return the display text as shown in the examples:

[]                                -->  "no one likes this"
["Peter"]                         -->  "Peter likes this"
["Jacob", "Alex"]                 -->  "Jacob and Alex like this"
["Max", "John", "Mark"]           -->  "Max, John and Mark like this"
["Alex", "Jacob", "Mark", "Max"]  -->  "Alex, Jacob and 2 others like this"
Note: For 4 or more names, the number in "and 2 others" simply increases.


Answer:

function likes(names) {
    if(names === [] || names.length === 0) {
      return 'no one likes this';
    } else if(names.length === 1) {
      return `${names[0]} likes this`
    } else if(names.length === 2) {
      return `${names[0]} and ${names[1]} like this`;
    } else if(names.length === 3) {
      return `${names[0]}, ${names[1]} and ${names[2]} like this`
    } else if(names.length >= 4) {
      return `${names[0]}, ${names[1]} and ${names.length - 2} others like this`
    }
}

-------------------------------------------------------------------

Challenge 107

Simple, given a string of words, return the length of the shortest word(s).

String will never be empty and you do not need to account for different data types.


Answer:

function findShort(s){
  let split = s.split(' ');
  let smallest = split.sort((a,b) => a.length - b.length);
  return smallest[0].length
}

------------------------------------------------------------------

Challenge 108

Debug   function getSumOfDigits that takes positive integer to calculate sum of it's digits. Assume that argument is an integer.

Example
123  => 6
223  => 7
1337 => 14


Answer:

function getSumOfDigits(integer) {
  let array = integer.toString().split('');
  let numArray = array.map(Number);
  return numArray.reduce((acc,c) => acc + c, 0)
}

-------------------------------------------------------------------

Challenge 109

Your team is writing a fancy new text editor and you've been tasked with implementing the line numbering.

Write a function which takes a list of strings and returns each line prepended by the correct number.

The numbering starts at 1. The format is n: string. Notice the colon and space in between.

Examples: (Input --> Output)

[] --> []
["a", "b", "c"] --> ["1: a", "2: b", "3: c"]


Answer:

var number=function(array){
    let num = 0;
    let result = []
    if(array.length === 0) {
        console.log([]);
    }
    for(let i = 0; i <= array.length - 1; i++) {
        num++;
        result.push(`${num}: ${array[i]}`)
    }
    return result;
}

------------------------------------------------------------------

Challenge 110

Scenario
Several people are standing in a row divided into two teams.
The first person goes into team 1, the second goes into team 2, the third goes into team 1, and so on.

Task
Given an array of positive integers (the weights of the people), return a new array/tuple of two integers, 
where the first one is the total weight of team 1, and the second one is the total weight of team 2.

Notes
Array size is at least 1.
All numbers will be positive.
Input >> Output Examples
rowWeights([13, 27, 49])  ==>  return (62, 27)
Explanation:
The first element 62 is the total weight of team 1, and the second element 27 is the total weight of team 2.

rowWeights([50, 60, 70, 80])  ==>  return (120, 140)
Explanation:
The first element 120 is the total weight of team 1, and the second element 140 is the total weight of team 2.

rowWeights([80])  ==>  return (80, 0)
Explanation:
The first element 80 is the total weight of team 1, and the second element 0 is the total weight of team 2.


Answer:

function rowWeights(array){
  let team1 = [];
  let team2 = [];
  for(let i = 0; i <= array.length - 1; i++) {
    if(i % 2 === 0) {
      team1.push(array[i])
    } else {
      team2.push(array[i])
    }
  }
  let sum1 = team1.reduce((acc,c) => acc + c, 0);
  let sum2 = team2.reduce((acc,c) => acc + c, 0);
  return [sum1, sum2]
}

---------------------------------------------------------------

Challenge 111

Some new animals have arrived at the zoo. 
The zoo keeper is concerned that perhaps the animals do not have the right tails. 
To help her, you must correct the broken function to make sure that the second argument (tail), 
is the same as the last letter of the first argument (body) - otherwise the tail wouldn't fit!

If the tail is right return true, else return false.

The arguments will always be non empty strings, and normal letters.


Answer:

function correctTail(bod, tail) {
  return bod.charAt(bod.length - 1) === tail ? true : false;
}

----------------------------------------------------------------

Challenge 112

You are given two sorted arrays that both only contain integers. 
Your task is to find a way to merge them into a single one, sorted in asc order. 
Complete the function mergeArrays(arr1, arr2), where arr1 and arr2 are the original sorted arrays.

You don't need to worry about validation, since arr1 and arr2 must be arrays with 0 or more Integers. 
If both arr1 and arr2 are empty, then just return an empty array.

Note: arr1 and arr2 may be sorted in different orders. Also arr1 and arr2 may have same integers. Remove duplicated in the returned result.

Examples (input -> output)
* [1, 2, 3, 4, 5], [6, 7, 8, 9, 10] -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

* [1, 3, 5, 7, 9], [10, 8, 6, 4, 2] -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

* [1, 3, 5, 7, 9, 11, 12], [1, 2, 3, 4, 5, 10, 12] -> [1, 2, 3, 4, 5, 7, 9, 10, 11, 12]
Happy coding!



Answer:

function mergeArrays(arr1, arr2) {
  if(arr1.length === 0 && arr2.length === 0) {
    return [];
  }
  let arr3 = arr1.concat(arr2);
  let sorted = arr3.sort((a,b) => a - b);
  let set = new Set(sorted);
  return [...set];
}

-----------------------------------------------------------------------

Challenge 113

ASC Week 1 Challenge 4 (Medium #1)

Write a function that converts any sentence into a V A P O R W A V E sentence. 
a V A P O R W A V E sentence converts all the letters into uppercase, 
and adds 2 spaces between each letter (or special character) to create this V A P O R W A V E effect.

Note that spaces should be ignored in this case.

Examples
"Lets go to the movies"       -->  "L  E  T  S  G  O  T  O  T  H  E  M  O  V  I  E  S"
"Why isn't my code working?"  -->  "W  H  Y  I  S  N  '  T  M  Y  C  O  D  E  W  O  R  K  I  N  G  ?"


Answer:

function vaporcode(string) {
    let result = [];
    let array = string.toUpperCase().split(' ').join('')
    for(let i = 0; i <= array.length - 1; i++) {
        result.push(array[i], '')
    }
    return result.join(' ').trim()
}

------------------------------------------------------

Challenge 114

Write a function named setAlarm which receives two parameters. 
The first parameter, employed, is true whenever you are employed and the second parameter, vacation is true whenever you are on vacation.

The function should return true if you are employed and not on vacation (because these are the circumstances under which you need to set an alarm). 
It should return false otherwise. Examples:

setAlarm(true, true) -> false
setAlarm(false, true) -> false
setAlarm(false, false) -> false
setAlarm(true, false) -> true


Answer:

function setAlarm(employed, vacation){
return employed === true && vacation === false ? true : false;
}

-----------------------------------------------------

Challenge 115

Your coworker was supposed to write a simple helper function to capitalize a string (that contains a single word) before they went on vacation.

Unfortunately, they have now left and the code they gave you doesn't work. 
Fix the helper function they wrote so that it works as intended (i.e. make the first character in the string "word" upper case).

Don't worry about numbers, special characters, or non-string types being passed to the function. 
The string lengths will be from 1 character up to 10 characters, but will never be empty.


Answer:

function capitalizeWord(word) {
  return word[0].toUpperCase() + word.slice(1)
}

-------------------------------------------------------

Challenge 116

Define a function that removes duplicates from an array of numbers and returns it as a result.

The order of the sequence has to stay the same.


Answer:

function distinct(a) {
  let set = new Set(a);
  return [...set];
}

--------------------------------------------------------

Challenge 117

Oh no! Timmy hasn't followed instructions very carefully and forgot how to use the new String Template feature. 
Help Timmy with his string template so it works as he expects!


Answer:

function buildString(...template){
  return `I like ${template.join(', ')}!`;
}

--------------------------------------------------------

Challenge 118

Your goal in this kata is to implement a difference function, which subtracts one list from another and returns the result.

It should remove all values from list a, which are present in list b keeping their order.

arrayDiff([1,2],[1]) == [2]
If a value is present in b, all of its occurrences must be removed from the other:

arrayDiff([1,2,2,2,3],[2]) == [1,3]


Answer:

function arrayDiff(a, b) {
  return a.filter(e => !b.includes(e))
}

---------------------------------------------------------

Challenge 119

Write a function that takes in a string of one or more words, and returns the same string, 
but with all five or more letter words reversed (Just like the name of this Kata). 
Strings passed in will consist of only letters and spaces. Spaces will be included only when more than one word is present.

Examples: spinWords( "Hey fellow warriors" ) => returns "Hey wollef sroirraw" spinWords( "This is a test") => 
returns "This is a test" spinWords( "This is another test" )=> returns "This is rehtona test"


Answer:

function spinWords(string){
  let array = string.split(' ');
  for(let i = 0; i <= array.length - 1; i++) {
    if(array[i].length >= 5) {
      array[i] = array[i].split('').reverse().join('');
    }
  }
  return array.join(' ');
}

----------------------------------------------------------

Challenge 120

Write a function that will compare two values, one will be a number and one will be a string. 
Return true if they are the same character (regardless of their different data types) and return false if they are not.

To make this challange harder and to promp the challenger to read up about coercion,
I have disabled some of the built in methods including .toString(), .join(), .split(), parseInt and .Number().


Answer:

function add(a, b){
	return a == b ? true : false
}

----------------------------------------------------------

Challenge 121

DESCRIPTION:
Digital root is the recursive sum of all the digits in a number.

Given n, take the sum of the digits of n. If that value has more than one digit, 
continue reducing in this way until a single-digit number is produced. The input will be a non-negative integer.

Examples
    16  -->  1 + 6 = 7
   942  -->  9 + 4 + 2 = 15  -->  1 + 5 = 6
132189  -->  1 + 3 + 2 + 1 + 8 + 9 = 24  -->  2 + 4 = 6
493193  -->  4 + 9 + 3 + 1 + 9 + 3 = 29  -->  2 + 9 = 11  -->  1 + 1 = 2


Answer:

function digital_root(n) {
  return (n - 1) % 9 + 1;
}

--------------------------------------------------------------

Challenge 122

You are given an array (which will have a length of at least 3, but could be very large) containing integers. 
The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer N. 
Write a method that takes the array as an argument and returns this "outlier" N.

Examples
[2, 4, 0, 100, 4, 11, 2602, 36]
Should return: 11 (the only odd number)

[160, 3, 1719, 19, 11, 13, -21]
Should return: 160 (the only even number)


Answer:

function findOutlier(integers){
  let positiveArr = integers.filter(x => x % 2 === 0);
  let negativeArr = integers.filter(x => x % 2 !== 0);
  if(positiveArr.length > negativeArr.length) {
    return negativeArr[0];
  } else {
    return positiveArr[0]
  }
}

---------------------------------------------------------------

Challenge 123

Complete the method/function so that it converts dash/underscore delimited words into camel casing. 
The first word within the output should be capitalized only if the original word was capitalized (known as Upper Camel Case, 
also often referred to as Pascal case).

Examples
"the-stealth-warrior" gets converted to "theStealthWarrior"
"The_Stealth_Warrior" gets converted to "TheStealthWarrior"


Answer:

function camel(string) {
    string = string.replaceAll('-', ' ');
    string = string.replaceAll('_', ' ');
    let array = string.split(' ')
    if(array.length === 0) {
        console.log('An empty string was provided but not returned') 
    } else if(array[0].toUpperCase() + array.slice(1) === array[0]) {
        array[0] = array[0].toUpperCase() + array.slice(1);
    } else {
        array[0] = array[0]
    }
    for(let i = 1; i <= array.length - 1; i++) {
        array[i] = array[i][0].toUpperCase() + array[i].slice(1);
    }
    console.log(array.join(''));
}

-------------------------------------------------------------------

Challenge 124

Write a function, persistence, that takes in a positive parameter num and returns its multiplicative persistence, 
which is the number of times you must multiply the digits in num until you reach a single digit.

For example (Input --> Output):

39 --> 3 (because 3*9 = 27, 2*7 = 14, 1*4 = 4 and 4 has only one digit)
999 --> 4 (because 9*9*9 = 729, 7*2*9 = 126, 1*2*6 = 12, and finally 1*2 = 2)
4 --> 0 (because 4 is already a one-digit number)


Answer:

function persistence(num) {
   let count = 0;
  
  let string = num.toString();
  while(string.length > 1) {
    string = string.split('').map(Number).reduce((acc, c) => acc * c, 1).toString();
    count++;
  }
  return count;
}

---------------------------------------------------------------------

Challenge 125

In this kata you will create a function that takes a list of non-negative integers and strings,
and returns a new list with the strings filtered out.

Example
filter_list([1,2,'a','b']) == [1,2]
filter_list([1,'a','b',0,15]) == [1,0,15]
filter_list([1,2,'aasf','1','123',123]) == [1,2,123]


Answer:

function filter_list(l) {
    let result = [];
    for(let i = 0; i <= l.length - 1; i++) {
        if(Number.isInteger(l[i])) {
            result.push(l[i])
        }
    }
    return result;
}

-------------------------------------------------------------

Challenge 126

Write a function toWeirdCase (weirdcase in Ruby) that accepts a string, 
and returns the same string with all even indexed characters in each word upper cased, 
and all odd indexed characters in each word lower cased. The indexing just explained is zero based, 
so the zero-ith index is even, therefore that character should be upper cased and you need to start over for each word.

The passed in string will only consist of alphabetical characters and spaces(' '). 
Spaces will only be present if there are multiple words. Words will be separated by a single space(' ').

Examples:
toWeirdCase( "String" );//=> returns "StRiNg"
toWeirdCase( "Weird string case" );//=> returns "WeIrD StRiNg CaSe"


Answer:

function toWeirdCase(string){
      return string.split(' ').map((v,i)=>v.split('').map((v,i)=>i%2===0?v.toUpperCase():v.toLowerCase()).join('')).join(' ')
}

-------------------------------------------------------------------
