Challenge 101

The two oldest ages function/method needs to be completed. 
It should take an array of numbers as its argument and return the two highest numbers within the array. 
The returned value should be an array in the format [second oldest age, oldest age].

The order of the numbers passed in could be any order. 
The array will always include at least 2 items. 
If there are two or more oldest age, then return both of them in array format.

For example (Input --> Output):

[1, 2, 10, 8] --> [8, 10]
[1, 5, 87, 45, 8, 8] --> [45, 87]
[1, 3, 10, 0]) --> [3, 10]


Answer:

function twoOldestAges(ages){
  let sorted = ages.sort((a,b) => a - b);
  return sorted.slice(-2)
}

------------------------------------------------------------

Challenge 102

Task
Given a string str, reverse it and omit all non-alphabetic characters.

Example
For str = "krishan", the output should be "nahsirk".

For str = "ultr53o?n", the output should be "nortlu".

Input/Output
[input] string str
A string consists of lowercase latin letters, digits and symbols.

[output] a string


Answer:

function reverseLetter(str) {
  //coding and coding..
      let result = [];
    let array = str.split('');
    for(let i = 0; i <= array.length - 1; i++) {
        if(array[i] >= 'a' && array[i] <= 'z') {
            result.push(array[i]);
        }
    }
    return result.reverse().join('');
  
}

----------------------------------------------------------

Challenge 103

Your task is to remove all duplicate words from a string, leaving only single (first) words entries.

Example:

Input:

'alpha beta beta gamma gamma gamma delta alpha beta beta gamma gamma gamma delta'

Output:

'alpha beta gamma delta'


Answer:

function removeDuplicateWords (s) {
    let array = s.split(' ');
    let set = new Set(array);
    console.log([...set].join(' '));
}

----------------------------------------------------------

Challenge 104

It's bonus time in the big city! The fatcats are rubbing their paws in anticipation... but who is going to make the most money?

Build a function that takes in two arguments (salary, bonus). Salary will be an integer, and bonus a boolean.

If bonus is true, the salary should be multiplied by 10. If bonus is false, 
the fatcat did not make enough money and must receive only his stated salary.

Return the total figure the individual will receive as a string prefixed with "£" 
(= "\u00A3", JS, Go, Java and Julia), "$" (C#, C++, Ruby, Clojure, Elixir, PHP, Python, Haskell and Lua) or "¥" (Rust).


Answer:

function bonusTime(salary, bonus) {
return bonus === true ? '£' + salary * 10 : '£' + salary;
}

-------------------------------------------------------------

Challenge 105

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in. 
Additionally, if the number is negative, return 0 (for languages that do have them).

Note: If the number is a multiple of both 3 and 5, only count it once.

Courtesy of projecteuler.net (Problem 1)

function solution(number){
  let result = [];
  for(let i = 0; i < number; i++) {
    if(number < 0) {
      return 0;
    } else if(i % 3 === 0 && i % 5 === 0) {
      result.push(i);
    } else if(i % 3 === 0) {
      result.push(i);
    } else if(i % 5 === 0) {
      result.push(i)
    }
  }
  return result.reduce((acc,c) => acc + c, 0);
}

----------------------------------------------------------

Challenge 106

You probably know the "like" system from Facebook and other pages. 
People can "like" blog posts, pictures or other items. We want to create the text that should be displayed next to such an item.

Implement the function which takes an array containing the names of people that like an item. 
It must return the display text as shown in the examples:

[]                                -->  "no one likes this"
["Peter"]                         -->  "Peter likes this"
["Jacob", "Alex"]                 -->  "Jacob and Alex like this"
["Max", "John", "Mark"]           -->  "Max, John and Mark like this"
["Alex", "Jacob", "Mark", "Max"]  -->  "Alex, Jacob and 2 others like this"
Note: For 4 or more names, the number in "and 2 others" simply increases.


Answer:

function likes(names) {
    if(names === [] || names.length === 0) {
      return 'no one likes this';
    } else if(names.length === 1) {
      return `${names[0]} likes this`
    } else if(names.length === 2) {
      return `${names[0]} and ${names[1]} like this`;
    } else if(names.length === 3) {
      return `${names[0]}, ${names[1]} and ${names[2]} like this`
    } else if(names.length >= 4) {
      return `${names[0]}, ${names[1]} and ${names.length - 2} others like this`
    }
}

-------------------------------------------------------------------

Challenge 107

Simple, given a string of words, return the length of the shortest word(s).

String will never be empty and you do not need to account for different data types.


Answer:

function findShort(s){
  let split = s.split(' ');
  let smallest = split.sort((a,b) => a.length - b.length);
  return smallest[0].length
}

------------------------------------------------------------------

Challenge 108

Debug   function getSumOfDigits that takes positive integer to calculate sum of it's digits. Assume that argument is an integer.

Example
123  => 6
223  => 7
1337 => 14


Answer:

function getSumOfDigits(integer) {
  let array = integer.toString().split('');
  let numArray = array.map(Number);
  return numArray.reduce((acc,c) => acc + c, 0)
}

-------------------------------------------------------------------

Challenge 109

Your team is writing a fancy new text editor and you've been tasked with implementing the line numbering.

Write a function which takes a list of strings and returns each line prepended by the correct number.

The numbering starts at 1. The format is n: string. Notice the colon and space in between.

Examples: (Input --> Output)

[] --> []
["a", "b", "c"] --> ["1: a", "2: b", "3: c"]


Answer:

var number=function(array){
    let num = 0;
    let result = []
    if(array.length === 0) {
        console.log([]);
    }
    for(let i = 0; i <= array.length - 1; i++) {
        num++;
        result.push(`${num}: ${array[i]}`)
    }
    return result;
}

------------------------------------------------------------------

Challenge 110

Scenario
Several people are standing in a row divided into two teams.
The first person goes into team 1, the second goes into team 2, the third goes into team 1, and so on.

Task
Given an array of positive integers (the weights of the people), return a new array/tuple of two integers, 
where the first one is the total weight of team 1, and the second one is the total weight of team 2.

Notes
Array size is at least 1.
All numbers will be positive.
Input >> Output Examples
rowWeights([13, 27, 49])  ==>  return (62, 27)
Explanation:
The first element 62 is the total weight of team 1, and the second element 27 is the total weight of team 2.

rowWeights([50, 60, 70, 80])  ==>  return (120, 140)
Explanation:
The first element 120 is the total weight of team 1, and the second element 140 is the total weight of team 2.

rowWeights([80])  ==>  return (80, 0)
Explanation:
The first element 80 is the total weight of team 1, and the second element 0 is the total weight of team 2.


Answer:

function rowWeights(array){
  let team1 = [];
  let team2 = [];
  for(let i = 0; i <= array.length - 1; i++) {
    if(i % 2 === 0) {
      team1.push(array[i])
    } else {
      team2.push(array[i])
    }
  }
  let sum1 = team1.reduce((acc,c) => acc + c, 0);
  let sum2 = team2.reduce((acc,c) => acc + c, 0);
  return [sum1, sum2]
}

---------------------------------------------------------------

Challenge 111

Some new animals have arrived at the zoo. 
The zoo keeper is concerned that perhaps the animals do not have the right tails. 
To help her, you must correct the broken function to make sure that the second argument (tail), 
is the same as the last letter of the first argument (body) - otherwise the tail wouldn't fit!

If the tail is right return true, else return false.

The arguments will always be non empty strings, and normal letters.


Answer:

function correctTail(bod, tail) {
  return bod.charAt(bod.length - 1) === tail ? true : false;
}

----------------------------------------------------------------

Challenge 112

You are given two sorted arrays that both only contain integers. 
Your task is to find a way to merge them into a single one, sorted in asc order. 
Complete the function mergeArrays(arr1, arr2), where arr1 and arr2 are the original sorted arrays.

You don't need to worry about validation, since arr1 and arr2 must be arrays with 0 or more Integers. 
If both arr1 and arr2 are empty, then just return an empty array.

Note: arr1 and arr2 may be sorted in different orders. Also arr1 and arr2 may have same integers. Remove duplicated in the returned result.

Examples (input -> output)
* [1, 2, 3, 4, 5], [6, 7, 8, 9, 10] -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

* [1, 3, 5, 7, 9], [10, 8, 6, 4, 2] -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

* [1, 3, 5, 7, 9, 11, 12], [1, 2, 3, 4, 5, 10, 12] -> [1, 2, 3, 4, 5, 7, 9, 10, 11, 12]
Happy coding!



Answer:

function mergeArrays(arr1, arr2) {
  if(arr1.length === 0 && arr2.length === 0) {
    return [];
  }
  let arr3 = arr1.concat(arr2);
  let sorted = arr3.sort((a,b) => a - b);
  let set = new Set(sorted);
  return [...set];
}

-----------------------------------------------------------------------

Challenge 113

ASC Week 1 Challenge 4 (Medium #1)

Write a function that converts any sentence into a V A P O R W A V E sentence. 
a V A P O R W A V E sentence converts all the letters into uppercase, 
and adds 2 spaces between each letter (or special character) to create this V A P O R W A V E effect.

Note that spaces should be ignored in this case.

Examples
"Lets go to the movies"       -->  "L  E  T  S  G  O  T  O  T  H  E  M  O  V  I  E  S"
"Why isn't my code working?"  -->  "W  H  Y  I  S  N  '  T  M  Y  C  O  D  E  W  O  R  K  I  N  G  ?"


Answer:

function vaporcode(string) {
    let result = [];
    let array = string.toUpperCase().split(' ').join('')
    for(let i = 0; i <= array.length - 1; i++) {
        result.push(array[i], '')
    }
    return result.join(' ').trim()
}

------------------------------------------------------

Challenge 114

Write a function named setAlarm which receives two parameters. 
The first parameter, employed, is true whenever you are employed and the second parameter, vacation is true whenever you are on vacation.

The function should return true if you are employed and not on vacation (because these are the circumstances under which you need to set an alarm). 
It should return false otherwise. Examples:

setAlarm(true, true) -> false
setAlarm(false, true) -> false
setAlarm(false, false) -> false
setAlarm(true, false) -> true


Answer:

function setAlarm(employed, vacation){
return employed === true && vacation === false ? true : false;
}

-----------------------------------------------------

Challenge 115

Your coworker was supposed to write a simple helper function to capitalize a string (that contains a single word) before they went on vacation.

Unfortunately, they have now left and the code they gave you doesn't work. 
Fix the helper function they wrote so that it works as intended (i.e. make the first character in the string "word" upper case).

Don't worry about numbers, special characters, or non-string types being passed to the function. 
The string lengths will be from 1 character up to 10 characters, but will never be empty.


Answer:

function capitalizeWord(word) {
  return word[0].toUpperCase() + word.slice(1)
}

-------------------------------------------------------

Challenge 116

Define a function that removes duplicates from an array of numbers and returns it as a result.

The order of the sequence has to stay the same.


Answer:

function distinct(a) {
  let set = new Set(a);
  return [...set];
}

--------------------------------------------------------

Challenge 117

Oh no! Timmy hasn't followed instructions very carefully and forgot how to use the new String Template feature. 
Help Timmy with his string template so it works as he expects!


Answer:

function buildString(...template){
  return `I like ${template.join(', ')}!`;
}

--------------------------------------------------------

Challenge 118

Your goal in this kata is to implement a difference function, which subtracts one list from another and returns the result.

It should remove all values from list a, which are present in list b keeping their order.

arrayDiff([1,2],[1]) == [2]
If a value is present in b, all of its occurrences must be removed from the other:

arrayDiff([1,2,2,2,3],[2]) == [1,3]


Answer:

function arrayDiff(a, b) {
  return a.filter(e => !b.includes(e))
}

---------------------------------------------------------

Challenge 119

Write a function that takes in a string of one or more words, and returns the same string, 
but with all five or more letter words reversed (Just like the name of this Kata). 
Strings passed in will consist of only letters and spaces. Spaces will be included only when more than one word is present.

Examples: spinWords( "Hey fellow warriors" ) => returns "Hey wollef sroirraw" spinWords( "This is a test") => 
returns "This is a test" spinWords( "This is another test" )=> returns "This is rehtona test"


Answer:

function spinWords(string){
  let array = string.split(' ');
  for(let i = 0; i <= array.length - 1; i++) {
    if(array[i].length >= 5) {
      array[i] = array[i].split('').reverse().join('');
    }
  }
  return array.join(' ');
}

----------------------------------------------------------

Challenge 120

Write a function that will compare two values, one will be a number and one will be a string. 
Return true if they are the same character (regardless of their different data types) and return false if they are not.

To make this challange harder and to promp the challenger to read up about coercion,
I have disabled some of the built in methods including .toString(), .join(), .split(), parseInt and .Number().


Answer:

function add(a, b){
	return a == b ? true : false
}

----------------------------------------------------------

Challenge 121

DESCRIPTION:
Digital root is the recursive sum of all the digits in a number.

Given n, take the sum of the digits of n. If that value has more than one digit, 
continue reducing in this way until a single-digit number is produced. The input will be a non-negative integer.

Examples
    16  -->  1 + 6 = 7
   942  -->  9 + 4 + 2 = 15  -->  1 + 5 = 6
132189  -->  1 + 3 + 2 + 1 + 8 + 9 = 24  -->  2 + 4 = 6
493193  -->  4 + 9 + 3 + 1 + 9 + 3 = 29  -->  2 + 9 = 11  -->  1 + 1 = 2


Answer:

function digital_root(n) {
  return (n - 1) % 9 + 1;
}

--------------------------------------------------------------

Challenge 122

You are given an array (which will have a length of at least 3, but could be very large) containing integers. 
The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer N. 
Write a method that takes the array as an argument and returns this "outlier" N.

Examples
[2, 4, 0, 100, 4, 11, 2602, 36]
Should return: 11 (the only odd number)

[160, 3, 1719, 19, 11, 13, -21]
Should return: 160 (the only even number)


Answer:

function findOutlier(integers){
  let positiveArr = integers.filter(x => x % 2 === 0);
  let negativeArr = integers.filter(x => x % 2 !== 0);
  if(positiveArr.length > negativeArr.length) {
    return negativeArr[0];
  } else {
    return positiveArr[0]
  }
}

---------------------------------------------------------------

Challenge 123

Complete the method/function so that it converts dash/underscore delimited words into camel casing. 
The first word within the output should be capitalized only if the original word was capitalized (known as Upper Camel Case, 
also often referred to as Pascal case).

Examples
"the-stealth-warrior" gets converted to "theStealthWarrior"
"The_Stealth_Warrior" gets converted to "TheStealthWarrior"


Answer:

function camel(string) {
    string = string.replaceAll('-', ' ');
    string = string.replaceAll('_', ' ');
    let array = string.split(' ')
    if(array.length === 0) {
        console.log('An empty string was provided but not returned') 
    } else if(array[0].toUpperCase() + array.slice(1) === array[0]) {
        array[0] = array[0].toUpperCase() + array.slice(1);
    } else {
        array[0] = array[0]
    }
    for(let i = 1; i <= array.length - 1; i++) {
        array[i] = array[i][0].toUpperCase() + array[i].slice(1);
    }
    console.log(array.join(''));
}

-------------------------------------------------------------------

Challenge 124

Write a function, persistence, that takes in a positive parameter num and returns its multiplicative persistence, 
which is the number of times you must multiply the digits in num until you reach a single digit.

For example (Input --> Output):

39 --> 3 (because 3*9 = 27, 2*7 = 14, 1*4 = 4 and 4 has only one digit)
999 --> 4 (because 9*9*9 = 729, 7*2*9 = 126, 1*2*6 = 12, and finally 1*2 = 2)
4 --> 0 (because 4 is already a one-digit number)


Answer:

function persistence(num) {
   let count = 0;
  
  let string = num.toString();
  while(string.length > 1) {
    string = string.split('').map(Number).reduce((acc, c) => acc * c, 1).toString();
    count++;
  }
  return count;
}

---------------------------------------------------------------------

Challenge 125

In this kata you will create a function that takes a list of non-negative integers and strings,
and returns a new list with the strings filtered out.

Example
filter_list([1,2,'a','b']) == [1,2]
filter_list([1,'a','b',0,15]) == [1,0,15]
filter_list([1,2,'aasf','1','123',123]) == [1,2,123]


Answer:

function filter_list(l) {
    let result = [];
    for(let i = 0; i <= l.length - 1; i++) {
        if(Number.isInteger(l[i])) {
            result.push(l[i])
        }
    }
    return result;
}

-------------------------------------------------------------

Challenge 126

Write a function toWeirdCase (weirdcase in Ruby) that accepts a string, 
and returns the same string with all even indexed characters in each word upper cased, 
and all odd indexed characters in each word lower cased. The indexing just explained is zero based, 
so the zero-ith index is even, therefore that character should be upper cased and you need to start over for each word.

The passed in string will only consist of alphabetical characters and spaces(' '). 
Spaces will only be present if there are multiple words. Words will be separated by a single space(' ').

Examples:
toWeirdCase( "String" );//=> returns "StRiNg"
toWeirdCase( "Weird string case" );//=> returns "WeIrD StRiNg CaSe"


Answer:

function toWeirdCase(string){
      return string.split(' ').map((v,i)=>v.split('').map((v,i)=>i%2===0?v.toUpperCase():v.toLowerCase()).join('')).join(' ')
}

-------------------------------------------------------------------

Challenge 127

A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward. 
Examples of numerical palindromes are:

2332
110011
54322345

For a given number num, write a function to test if it's a numerical palindrome or not and return a boolean (true if it is and false if not).

Return "Not valid" if the input is not an integer or less than 0.


Answer:

function palindrome(num) { 
    if(typeof num !== 'number' || num < 0) {
      return 'Not valid'
  } else {
      return num.toString() === num.toString().split('').reverse().join('') ? true : false;
  }
} 

--------------------------------------------------------------

Challenge 128

Let's imagine we have a popular online RPG. A player begins with a score of 0 in class E5. A1 is the highest level a player can achieve.

Now let's say the players wants to rank up to class E4. To do so the player needs to achieve at least 100 points to enter the qualifying stage.

Write a script that will check to see if the player has achieved at least 100 points in his class. If so, he enters the qualifying stage.

In that case, we return, "Well done! You have advanced to the qualifying stage. Win 2 out of your next 3 games to rank up.".

Otherwise return, False/false (according to the language in use).

NOTE
: Remember, in C# you have to cast your output value to Object type!


Answer:

function playerRankUp (points) {
return points >= 100 ? 'Well done! You have advanced to the qualifying stage. Win 2 out of your next 3 games to rank up.' : false;
}

---------------------------------------------------------------

Challenge 129

This kata is from check py.checkio.org

You are given an array with positive numbers and a non-negative number N. 
You should find the N-th power of the element in the array with the index N. 
If N is outside of the array, then return -1. Don't forget that the first element has the index 0.

Let's look at a few examples:

array = [1, 2, 3, 4] and N = 2, then the result is 3^2 == 9;
array = [1, 2, 3] and N = 3, but N is outside of the array, so the result is -1.


Answer:

function index(array, n){
  if(n > array.length - 1) {
    return -1;
  }
  for(let i = 0; i <= array.length - 1; i++) {
    if(n === i) {
      return Math.pow(array[i], n)
    }
  }
}

----------------------------------------------------------------------

Challenge 130

Alex just got a new hula hoop, he loves it but feels discouraged because his little brother is better than him

Write a program where Alex can input (n) how many times the hoop goes round and it will return him an encouraging message :)

If Alex gets 10 or more hoops, return the string "Great, now move on to tricks".
If he doesn't get 10 hoops, return the string "Keep at it until you get it".


Answer:

function hoopCount (n) {
   return n >= 10 ? 'Great, now move on to tricks' : 'Keep at it until you get it'  
}

-----------------------------------------------------------------------

Challenge 131

function findUniq(arr) {
    arr.sort()
    return arr[0] !== arr[1] ? arr[0] : arr.pop();
}

-----------------------------------------------------------------------

Challenge 132

Find the sum of the digits of all the numbers from 1 to N (both ends included).

Examples
# N = 4
1 + 2 + 3 + 4 = 10

# N = 10
1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + (1 + 0) = 46

# N = 12
1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + (1 + 0) + (1 + 1) + (1 + 2) = 51


Answer:

function twistedSum(n) {
      let array = [];
    let arrayDFinal = [];
    for(let i = 1; i <= n; i++) {
        array.push(i)
    };
    let arrayS = array.filter(x => x <= 9);

    let arrayD = array.filter(x => x >= 10);
    arrayD = arrayD.toString().split('')
    for(let i = 0; i <= arrayD.length - 1; i++) {
        if(arrayD[i] >= 0 && arrayD[i] <= 9) {
            arrayDFinal.push(arrayD[i])
        }
    }
    let sumD = arrayDFinal.map(Number).reduce((acc,c) => acc + c, 0);

    let sumS = arrayS.reduce((acc, c) => acc + c, 0);
    let result = sumS + sumD;
    return result;
};

-----------------------------------------------------------

Challenge 133

This is an easy twist to the example kata (provided by Codewars when learning how to create your own kata).

Add the value "codewars" to the array websites/Websites 1,000 times.


Answer:


var websites = []
for(let i = 1; i <= 1000; i++) {
  websites.push('codewars')
}

-----------------------------------------------------------

Challenge 134

Welcome.

In this kata you are required to, given a string, replace every letter with its position in the alphabet.

If anything in the text isn't a letter, ignore it and don't return it.

"a" = 1, "b" = 2, etc.

Example
alphabetPosition("The sunset sets at twelve o' clock.")
Should return "20 8 5 19 21 14 19 5 20 19 5 20 19 1 20 20 23 5 12 22 5 15 3 12 15 3 11" ( as a string )


Answer:

function alphabetPosition(text) {
    let result = '';
    text = text.toLowerCase().split('')
    for(let i = 0; i <= text.length - 1; i++) {
        if(text[i] === 'a') {
            result += '1 ';
        } else if(text[i] === 'b') {
            result += '2 ';
        } else if(text[i] === 'c') {
            result += '3 '
        } else if(text[i] === 'd') {
            result += '4 '
        } else if(text[i] === 'e') {
            result += '5 '
        } else if(text[i] === 'f') {
            result += '6 '
        } else if(text[i] === 'g') {
            result += '7 '
        } else if(text[i] === 'h') {
            result += '8 '
        } else if(text[i] === 'i') {
            result += '9 '
        } else if(text[i] === 'j') {
            result += '10 '
        } else if(text[i] === 'k') {
            result += '11 '
        } else if(text[i] === 'l') {
            result += '12 '
        } else if(text[i] === 'm') {
            result += '13 '
        } else if(text[i] === 'n') {
            result += '14 '
        } else if(text[i] === 'o') {
            result += '15 '
        } else if(text[i] === 'p') {
            result += '16 '
        } else if(text[i] === 'q') {
            result += '17 '
        } else if(text[i] === 'r') {
            result += '18 '
        } else if(text[i] === 's') {
            result += '19 '
        } else if(text[i] === 't') {
            result += '20 '
        } else if(text[i] === 'u') {
            result += '21 '
        } else if(text[i] === 'v') {
            result += '22 '
        } else if(text[i] === 'w') {
            result += '23 '
        } else if(text[i] === 'x') {
            result += '24 '
        } else if(text[i] === 'y') {
            result += '25 '
        } else if(text[i] === 'z') {
            result += '26 '
        }
    }
    return (result.trim())
}

---------------------------------------------------

Challenge 135

Given a mixed array of number and string representations of integers, 
add up the string integers and subtract this from the total of the non-string integers.

Return as a number.


Answer:

function divCon(x){
    let numbers = x.filter(x => typeof x === 'number');
    let sumNumbers = numbers.reduce((acc,c) => acc + c, 0);
    let strings = x.filter(x => typeof x === 'string');
    let stringNumbers = strings.map(Number);
    let sumStrings = stringNumbers.reduce((acc,c) => acc + c, 0);
    return sumNumbers - sumStrings;
}

--------------------------------------------------

Challenge 136

Write an algorithm that takes an array and moves all of the zeros to the end, preserving the order of the other elements.

moveZeros([false,1,0,1,2,0,1,3,"a"]) // returns[false,1,1,2,1,3,"a",0,0]


Answer:

function moveZeros(arr) {
  let zeros = arr.filter(x => x === 0).length;
  let result = arr.filter(x => x !== 0);
  
  for(let i = 0; i < zeros; i++) {
    result.push(0)
  }  
  return result;
}

--------------------------------------------------

Challenge 137

What is an anagram? Well, two words are anagrams of each other if they both contain the same letters. For example:

'abba' & 'baab' == true

'abba' & 'bbaa' == true

'abba' & 'abbba' == false

'abba' & 'abca' == false
Write a function that will find all the anagrams of a word from a list. 
You will be given two inputs a word and an array with words. 
You should return an array of all the anagrams or an empty array if there are none. For example:

anagrams('abba', ['aabb', 'abcd', 'bbaa', 'dada']) => ['aabb', 'bbaa']

anagrams('racer', ['crazer', 'carer', 'racar', 'caers', 'racer']) => ['carer', 'racer']

anagrams('laser', ['lazing', 'lazy',  'lacer']) => []
Note for Go
For Go: Empty string slice is expected when there are no anagrams found.


Answer:

function anagrams(word, words) {
    return words.filter(x => x.split('').sort().join('') === word.split('').sort().join(''))
}

----------------------------------------------------------------

Challenge 138

DESCRIPTION:
Given an array of integers, find the one that appears an odd number of times.

There will always be only one integer that appears an odd number of times.

Examples
[7] should return 7, because it occurs 1 time (which is odd).
[0] should return 0, because it occurs 1 time (which is odd).
[1,1,2] should return 2, because it occurs 1 time (which is odd).
[0,1,0,1,0] should return 0, because it occurs 3 times (which is odd).
[1,2,2,3,3,3,4,3,3,3,2,2,1] should return 4, because it appears 1 time (which is odd).


Answer:

function findOdd(A) {
  for (let i = 0; i <= A.length-1; i += 1) {
   
    let elmLength = A.filter ((elm) => elm === A[i]).length;
    
   if (elmLength % 2 !== 0) {
     return A[i];
   }
  }
}

------------------------------------------------------------

Challenge 139

Write reverseList function that simply reverses lists.


Answer:

function reverseList(arr) {
  if(arr.length === 0) {
    return [];
  } else {
    return arr.reverse();
  }
  
}

-------------------------------------------------------------

Challenge 140

Challenge:

Given a two-dimensional array of integers, return the flattened version of the array with all the integers in the sorted (ascending) order.

Example:

Given [[3, 2, 1], [4, 6, 5], [], [9, 7, 8]], your function should return [1, 2, 3, 4, 5, 6, 7, 8, 9].


Answer:

function flattenAndSort(array) {
  
  return array.flat().sort((a,b) => a - b);
}

--------------------------------------------------------------

Challenge 141

If　a = 1, b = 2, c = 3 ... z = 26

Then l + o + v + e = 54

and f + r + i + e + n + d + s + h + i + p = 108

So friendship is twice stronger than love :-)

The input will always be in lowercase and never be empty.


Answer:

function wordsToMarks(string){
  let result = [];
  let array = string.toLowerCase().split('');
  for(let i = 0; i <= array.length - 1; i++) {
    if(array[i] === 'a') {
      result.push(1);
    } else if(array[i] === 'b') {
      result.push(2);
    } else if(array[i] === 'c') {
      result.push(3);
    } else if(array[i] === 'd') {
      result.push(4);
    } else if(array[i] === 'e') {
      result.push(5);
    } else if(array[i] === 'f') {
      result.push(6);
    } else if(array[i] === 'g') {
      result.push(7);
    } else if(array[i] === 'h') {
      result.push(8);
    } else if(array[i] === 'i') {
      result.push(9);
    } else if(array[i] === 'j') {
      result.push(10);
    } else if(array[i] === 'k') {
      result.push(11);
    } else if(array[i] === 'l') {
      result.push(12);
    } else if(array[i] === 'm') {
      result.push(13);
    } else if(array[i] === 'n') {
      result.push(14);
    } else if(array[i] === 'o') {
      result.push(15);
    } else if(array[i] === 'p') {
      result.push(16);
    } else if(array[i] === 'q') {
      result.push(17);
    } else if(array[i] === 'r') {
      result.push(18);
    } else if(array[i] === 's') {
      result.push(19);
    } else if(array[i] === 't') {
      result.push(20);
    } else if(array[i] === 'u') {
      result.push(21);
    } else if(array[i] === 'v') {
      result.push(22);
    } else if(array[i] === 'w') {
      result.push(23);
    } else if(array[i] === 'x') {
      result.push(24);
    } else if(array[i] === 'y') {
      result.push(25);
    } else if(array[i] === 'z') {
      result.push(26);
    }
  }
  return result.reduce((acc,c) => acc + c, 0)
}

---------------------------------------------------------

Challenge 142

Task
Given a list of digits, return the smallest number that could be formed from these digits, using the digits only once (ignore duplicates).

Notes:
Only positive integers will be passed to the function (> 0 ), no negatives or zeros.
Input >> Output Examples
minValue ({1, 3, 1})  ==> return (13)
Explanation:
(13) is the minimum number could be formed from {1, 3, 1} , Without duplications

minValue({5, 7, 5, 9, 7})  ==> return (579)
Explanation:
(579) is the minimum number could be formed from {5, 7, 5, 9, 7} , Without duplications

minValue({1, 9, 3, 1, 7, 4, 6, 6, 7}) return  ==> (134679)
Explanation:
(134679) is the minimum number could be formed from {1, 9, 3, 1, 7, 4, 6, 6, 7} , Without duplications


Answer:

function minValue(values){
        let set = new Set(values);
        let array = [...set];
        let number = array.sort((a,b) => a - b).join('')
        return Number(number)
}

--------------------------------------------------------------

Challenge 143

Given a string made up of letters a, b, and/or c, switch the position of letters a and b (change a to b and vice versa). 
Leave any incidence of c untouched.

Example:

'acb' --> 'bca'
'aabacbaa' --> 'bbabcabb'


Answer:

function switcheroo(x){
  let result = [];
  let array = x.toLowerCase().split('');
  for(let i = 0; i <= array.length - 1; i++) {
    if(array[i] === 'a') {
      result.push('b')
    } else if(array[i] === 'b') {
      result.push('a')
    } else {
      result.push('c');
    }
  }
  return result.join('')
}

-----------------------------------------------------------

Challenge 144

DESCRIPTION:
Given a string of words, you need to find the highest scoring word.

Each letter of a word scores points according to its position in the alphabet: a = 1, b = 2, c = 3 etc.

You need to return the highest scoring word as a string.

If two words score the same, return the word that appears earliest in the original string.

All letters will be lowercase and all inputs will be valid.


Answer:

function high(x){
let result = '', value =0, counterValue = 0; 

  let splittedArray = x.split(' ');

  splittedArray.map(splitItem => {
    counterValue = 0;

    let splitItemArray = splitItem.split('');

    splitItemArray.map(splitChar => { 
      counterValue += splitChar.charCodeAt()-96; // if I subtract 96 then it will calculate a as 1, b as 2......
    })

    if(counterValue>value){
      result = splitItem;
      value = counterValue;
    }
  });
  return result;}
  
--------------------------------------------------------

Challenge 145

Write a function that can return the smallest value of an array or the index of that value. 
The function's 2nd parameter will tell whether it should return the value or the index.

Assume the first parameter will always be an array filled with at least 1 number and no duplicates. 
Assume the second parameter will be a string holding one of two values: 'value' and 'index'.

min([1,2,3,4,5], 'value') // => 1
min([1,2,3,4,5], 'index') // => 0


Answer:

function min(arr, toReturn) {
  let sorted = arr.sort((a,b) => a - b);
  if(toReturn === 'value') {
    return sorted[0];
  } else {
    return 0;
  }
}

--------------------------------------------------------------

Challenge 146

Gordon Ramsay shouts. He shouts and swears. There may be something wrong with him.

Anyway, you will be given a string of four words. Your job is to turn them in to Gordon language.

Rules:

Obviously the words should be Caps, Every word should end with '!!!!', Any letter 'a' or 'A' should become '@', Any other vowel should become '*'.


Answer:

function gordon(a){
      let answer = [];
    let result =[];
    let array = a.split(' ')
    for(let i = 0; i <= array.length - 1; i++) {
        result.push(array[i] + '!!!!')
    }
    result = result.join(' ')

    let secondSplit = result.toUpperCase().split('')
    for(let i = 0; i <= secondSplit.length - 1; i++) {
        if(secondSplit[i] === 'A') {
            answer.push('@');
        } else if(secondSplit[i] === 'E' || secondSplit[i] === 'I' || secondSplit[i] === 'O' || secondSplit[i] === 'U') {
            answer.push('*');
        } else {
            answer.push(secondSplit[i]);
        }
    }
    return answer.join('')
}

----------------------------------------------------------------

Challenge 147

DESCRIPTION:
Create the function consecutive(arr) that takes an array of integers and return the minimum number of 
integers needed to make the contents of arr consecutive from the lowest number to the highest number.

For example:
If arr contains [4, 8, 6] then the output should be 2 because two numbers need to be added to the array (5 and 7) 
to make it a consecutive array of numbers from 4 to 8. Numbers in arr will be unique.


Answer:

function consecutive(arr) {
    let result = [];
    let sorted = arr.sort((a,b) => a - b);
    
    for(let i = sorted[0]; i <= sorted[sorted.length - 1]; i++) {
      result.push(i)
    }
    return result.length - sorted.length;
}

---------------------------------------------------------------

Challenge 148

Every book has n pages with page numbers 1 to n. The summary is made by adding up the number of digits of all page numbers.

Task: Given the summary, find the number of pages n the book has.

Example
If the input is summary=25, then the output must be n=17: The numbers 1 to 17 have 25 digits in total: 1234567891011121314151617.

Be aware that you'll get enormous books having up to 100.000 pages.

All inputs will be valid.


Answer:

function amountOfPages(summary){
      if(summary <= 9) {
        return summary;
    }
    var count = 0;
    var res = 0;
    for(let i = 1; i<summary; i++){
      count+=i.toString().length
      if(count==summary) {
          res = i
      }
    }
    return res;
}

----------------------------------------------------------

Challenge 149

DESCRIPTION:
You are given three integer inputs: length, minimum, and maximum.

Return a string that:

Starts at minimum
Ascends one at a time until reaching the maximum, then
Decends one at a time until reaching the minimum
repeat until the string is the appropriate length
Examples:

 length: 5, minimum: 1, maximum: 3   ==>  "12321"
 length: 14, minimum: 0, maximum: 2  ==>  "01210121012101"
 length: 11, minimum: 5, maximum: 9  ==>  "56789876567"
Notes:

length will always be non-negative
negative numbers can appear for minimum and maximum values
hyphens/dashes ("-") for negative numbers do count towards the length
the resulting string must be truncated to the exact length provided
return an empty string if maximum < minimum or length == 0
minimum and maximum can equal one another and result in a single number repeated for the length of the string


Answer:

function ascendDescend(length, minimum, maximum) {
  let increase = '', descending = '', answer = '';
  for (let i = minimum; i <= maximum; i++) {
      increase += i;
  }
  for (let j = maximum - 1; j > minimum; j--) {
      descending += j;
  }
  for (let k = 0; k < length; k++) {
      answer += increase;
      answer += descending;
  }
  return answer.slice(0, length);
}

-----------------------------------------------------------

Challenge 150

DESCRIPTION:
Write a function last that accepts a list and returns the last element in the list.

If the list is empty:

In languages that have a built-in option or result type (like OCaml or Haskell), return an empty option

In languages that do not have an empty option, just return null


Answer:

const last = xs => {
  if(xs.length===0)
  { return null; }
  else
  { return xs[xs.length-1]; }
}

--------------------------------------------------------

Challenge 151

Write a program to determine if a string contains only unique characters. Return true if it does and false otherwise.

The string may contain any of the 128 ASCII characters. Characters are case-sensitive, e.g. 'a' and 'A' are considered different characters.


Answer:

function hasUniqueChars(str){
  let array = str.split('');
  let set = new Set(array);
  if(set.size === array.length) {
    return true;
  } else {
    return false;
  }
}

-------------------------------------------------------

Challenge 152

You will be given an array and a limit value. You must check that all values in the array are below or equal to the limit value. 
If they are, return true. Else, return false.

You can assume all values in the array are numbers.

Answer:

function smallEnough(a, limit){
  let result = [];
  for(let i = 0; i <= a.length - 1; i++) {
    if(a[i] < limit || a[i] === limit) {
      result.push(a[i]);
    }
  }
  if(result.length === a.length) {
    return true;
  } else {
    return false;
  }
}

--------------------------------------------------------

Challenge 153

Introduction
The wave (known as the Mexican wave in the English-speaking world outside North America) 
is an example of metachronal rhythm achieved in a packed stadium when successive groups of spectators briefly stand, yell, and raise their arms. 
Immediately upon stretching to full height, the spectator returns to the usual seated position.

The result is a wave of standing spectators that travels through the crowd, even though individual spectators never move away from their seats. 
In many large arenas the crowd is seated in a contiguous circuit all the way around the sport field, 
and so the wave is able to travel continuously around the arena; in discontiguous seating arrangements, 
the wave can instead reflect back and forth through the crowd. When the gap in seating is narrow, the wave can sometimes pass through it. 
Usually only one wave crest will be present at any given time in an arena, although simultaneous, counter-rotating waves have been produced. 
(Source Wikipedia)

Task
In this simple Kata your task is to create a function that turns a string into a Mexican Wave. You will be passed a string and you must return that string in an array where an uppercase letter is a person standing up. 
Rules

 1.  The input string will always be lower case but maybe empty.

 2.  If the character in the string is whitespace then pass over it as if it was an empty seat
 
Example
wave("hello") => ["Hello", "hEllo", "heLlo", "helLo", "hellO"]

Good luck and enjoy!


Answer:

function wave(str){
  let waveArr = [];
  for(let i = 0; i < str.length; i++) {
    let letter = str[i];
    if (letter === " ") {
      continue;
    } else {
      waveArr.push(str.slice(0, i) + letter.toUpperCase() + str.slice(i + 1))
    } 
  }
  return waveArr;
}

------------------------------------------------------------

Challenge 154

Pirates have notorious difficulty with enunciating. They tend to blur all the letters together and scream at people.

At long last, we need a way to unscramble what these pirates are saying.

Write a function that will accept a jumble of letters as well as a dictionary, and output a list of words that the pirate might have meant.

For example:

grabscrab( "ortsp", ["sport", "parrot", "ports", "matey"] )


Answer:

function grabscrab(anagram, dictionary) {
      let result = [];
    for(let i = 0; i <= dictionary.length - 1; i++) {
        if(dictionary[i].split('').sort().join('') === anagram.split('').sort().join('')) {
            result.push(dictionary[i])
        }
    }
    return result;
}

----------------------------------------------------------
