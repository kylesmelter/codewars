Challenge 101

The two oldest ages function/method needs to be completed. 
It should take an array of numbers as its argument and return the two highest numbers within the array. 
The returned value should be an array in the format [second oldest age, oldest age].

The order of the numbers passed in could be any order. 
The array will always include at least 2 items. 
If there are two or more oldest age, then return both of them in array format.

For example (Input --> Output):

[1, 2, 10, 8] --> [8, 10]
[1, 5, 87, 45, 8, 8] --> [45, 87]
[1, 3, 10, 0]) --> [3, 10]


Answer:

function twoOldestAges(ages){
  let sorted = ages.sort((a,b) => a - b);
  return sorted.slice(-2)
}

------------------------------------------------------------

Challenge 102

Task
Given a string str, reverse it and omit all non-alphabetic characters.

Example
For str = "krishan", the output should be "nahsirk".

For str = "ultr53o?n", the output should be "nortlu".

Input/Output
[input] string str
A string consists of lowercase latin letters, digits and symbols.

[output] a string


Answer:

function reverseLetter(str) {
  //coding and coding..
      let result = [];
    let array = str.split('');
    for(let i = 0; i <= array.length - 1; i++) {
        if(array[i] >= 'a' && array[i] <= 'z') {
            result.push(array[i]);
        }
    }
    return result.reverse().join('');
  
}

----------------------------------------------------------

Challenge 103

Your task is to remove all duplicate words from a string, leaving only single (first) words entries.

Example:

Input:

'alpha beta beta gamma gamma gamma delta alpha beta beta gamma gamma gamma delta'

Output:

'alpha beta gamma delta'


Answer:

function removeDuplicateWords (s) {
    let array = s.split(' ');
    let set = new Set(array);
    console.log([...set].join(' '));
}

----------------------------------------------------------

Challenge 104

It's bonus time in the big city! The fatcats are rubbing their paws in anticipation... but who is going to make the most money?

Build a function that takes in two arguments (salary, bonus). Salary will be an integer, and bonus a boolean.

If bonus is true, the salary should be multiplied by 10. If bonus is false, 
the fatcat did not make enough money and must receive only his stated salary.

Return the total figure the individual will receive as a string prefixed with "£" 
(= "\u00A3", JS, Go, Java and Julia), "$" (C#, C++, Ruby, Clojure, Elixir, PHP, Python, Haskell and Lua) or "¥" (Rust).


Answer:

function bonusTime(salary, bonus) {
return bonus === true ? '£' + salary * 10 : '£' + salary;
}

-------------------------------------------------------------

Challenge 105

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Finish the solution so that it returns the sum of all the multiples of 3 or 5 below the number passed in. 
Additionally, if the number is negative, return 0 (for languages that do have them).

Note: If the number is a multiple of both 3 and 5, only count it once.

Courtesy of projecteuler.net (Problem 1)

function solution(number){
  let result = [];
  for(let i = 0; i < number; i++) {
    if(number < 0) {
      return 0;
    } else if(i % 3 === 0 && i % 5 === 0) {
      result.push(i);
    } else if(i % 3 === 0) {
      result.push(i);
    } else if(i % 5 === 0) {
      result.push(i)
    }
  }
  return result.reduce((acc,c) => acc + c, 0);
}

----------------------------------------------------------

Challenge 106

You probably know the "like" system from Facebook and other pages. 
People can "like" blog posts, pictures or other items. We want to create the text that should be displayed next to such an item.

Implement the function which takes an array containing the names of people that like an item. 
It must return the display text as shown in the examples:

[]                                -->  "no one likes this"
["Peter"]                         -->  "Peter likes this"
["Jacob", "Alex"]                 -->  "Jacob and Alex like this"
["Max", "John", "Mark"]           -->  "Max, John and Mark like this"
["Alex", "Jacob", "Mark", "Max"]  -->  "Alex, Jacob and 2 others like this"
Note: For 4 or more names, the number in "and 2 others" simply increases.


Answer:

function likes(names) {
    if(names === [] || names.length === 0) {
      return 'no one likes this';
    } else if(names.length === 1) {
      return `${names[0]} likes this`
    } else if(names.length === 2) {
      return `${names[0]} and ${names[1]} like this`;
    } else if(names.length === 3) {
      return `${names[0]}, ${names[1]} and ${names[2]} like this`
    } else if(names.length >= 4) {
      return `${names[0]}, ${names[1]} and ${names.length - 2} others like this`
    }
}

-------------------------------------------------------------------

Challenge 107

Simple, given a string of words, return the length of the shortest word(s).

String will never be empty and you do not need to account for different data types.


Answer:

function findShort(s){
  let split = s.split(' ');
  let smallest = split.sort((a,b) => a.length - b.length);
  return smallest[0].length
}

------------------------------------------------------------------

Challenge 108

Debug   function getSumOfDigits that takes positive integer to calculate sum of it's digits. Assume that argument is an integer.

Example
123  => 6
223  => 7
1337 => 14


Answer:

function getSumOfDigits(integer) {
  let array = integer.toString().split('');
  let numArray = array.map(Number);
  return numArray.reduce((acc,c) => acc + c, 0)
}

-------------------------------------------------------------------

Challenge 109

Your team is writing a fancy new text editor and you've been tasked with implementing the line numbering.

Write a function which takes a list of strings and returns each line prepended by the correct number.

The numbering starts at 1. The format is n: string. Notice the colon and space in between.

Examples: (Input --> Output)

[] --> []
["a", "b", "c"] --> ["1: a", "2: b", "3: c"]


Answer:

var number=function(array){
    let num = 0;
    let result = []
    if(array.length === 0) {
        console.log([]);
    }
    for(let i = 0; i <= array.length - 1; i++) {
        num++;
        result.push(`${num}: ${array[i]}`)
    }
    return result;
}

------------------------------------------------------------------

Challenge 110

Scenario
Several people are standing in a row divided into two teams.
The first person goes into team 1, the second goes into team 2, the third goes into team 1, and so on.

Task
Given an array of positive integers (the weights of the people), return a new array/tuple of two integers, 
where the first one is the total weight of team 1, and the second one is the total weight of team 2.

Notes
Array size is at least 1.
All numbers will be positive.
Input >> Output Examples
rowWeights([13, 27, 49])  ==>  return (62, 27)
Explanation:
The first element 62 is the total weight of team 1, and the second element 27 is the total weight of team 2.

rowWeights([50, 60, 70, 80])  ==>  return (120, 140)
Explanation:
The first element 120 is the total weight of team 1, and the second element 140 is the total weight of team 2.

rowWeights([80])  ==>  return (80, 0)
Explanation:
The first element 80 is the total weight of team 1, and the second element 0 is the total weight of team 2.


Answer:

function rowWeights(array){
  let team1 = [];
  let team2 = [];
  for(let i = 0; i <= array.length - 1; i++) {
    if(i % 2 === 0) {
      team1.push(array[i])
    } else {
      team2.push(array[i])
    }
  }
  let sum1 = team1.reduce((acc,c) => acc + c, 0);
  let sum2 = team2.reduce((acc,c) => acc + c, 0);
  return [sum1, sum2]
}

---------------------------------------------------------------
