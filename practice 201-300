Given two numbers and an arithmetic operator (the name of it, as a string), return the result of the two numbers having that operator used on them.

a and b will both be positive integers, and a will always be the first number in the operation, and b always the second.

The four operators are "add", "subtract", "divide", "multiply".

A few examples:(Input1, Input2, Input3 --> Output)

5, 2, "add"      --> 7
5, 2, "subtract" --> 3
5, 2, "multiply" --> 10
5, 2, "divide"   --> 2.5


Answer:

function arithmetic(a, b, operator){
  if(operator === 'add') {
    return a + b;
  } else if(operator === 'subtract') {
    return a - b;
  } else if(operator === 'multiply') {
    return a * b;
  } else {
    return a / b;
  }
}

----------------------------------------------------------------

Challenge 202

Well met with Fibonacci bigger brother, AKA Tribonacci.

As the name may already reveal, it works basically like a Fibonacci, but summing the last 3 (instead of 2) numbers of the sequence to generate the next. 
And, worse part of it, regrettably I won't get to hear non-native Italian speakers trying to pronounce it :(

So, if we are to start our Tribonacci sequence with [1, 1, 1] as a starting input (AKA signature), we have this sequence:

[1, 1 ,1, 3, 5, 9, 17, 31, ...]
But what if we started with [0, 0, 1] as a signature? As starting with [0, 1] instead of [1, 1] basically shifts the common Fibonacci sequence 
by once place, you may be tempted to think that we would get the same sequence shifted by 2 places, but that is not the case and we would get:

[0, 0, 1, 1, 2, 4, 7, 13, 24, ...]
Well, you may have guessed it by now, but to be clear: you need to create a fibonacci function that given a signature array/list, 
returns the first n elements - signature included of the so seeded sequence.

Signature will always contain 3 numbers; n will always be a non-negative number; if n == 0, then return an empty array (except in C return NULL) 
and be ready for anything else which is not clearly specified ;)

If you enjoyed this kata more advanced and generalized version of it can be found in the Xbonacci kata

[Personal thanks to Professor Jim Fowler on Coursera for his awesome classes that I really recommend to any math enthusiast and for 
showing me this mathematical curiosity too with his usual contagious passion :)]


Answer:

function tribonacci(signature,n){
    if (n === 0) {
    return []
  } else if (n === 1) {
    return [1]
  } else {
    for (let i = 3; i <= n; i++) {
      signature[i] = signature[i - 1] + signature[i - 2] + signature[i - 3]
    }
    signature.pop()
    return signature
  }
}

------------------------------------------------------------------

Challenge 203

Reverse every other word in a given string, then return the string. 
Throw away any leading or trailing whitespace, while ensuring there is exactly one space between each word. 
Punctuation marks should be treated as if they are a part of the word in this kata.


Answer:

function reverse(str){
  let result = [];
  
  let array = str.split(' ');
  
  for(let i = 0; i <= array.length - 1; i++) {
    if(i % 2 === 0) {
      result.push(array[i])
    } else {
      result.push(array[i].split('').reverse().join(''))
    }
  }
  return result.join(' ').trim();
}

-------------------------------------------------------------

Challenge 204

Task
You will be given an array of numbers. 
You have to sort the odd numbers in ascending order while leaving the even numbers at their original positions.

Examples
[7, 1]  =>  [1, 7]
[5, 8, 6, 3, 4]  =>  [3, 8, 6, 5, 4]
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]  =>  [1, 8, 3, 6, 5, 4, 7, 2, 9, 0]


Answer:

function sortArray(array) {
  var odds = [];
  //loop, if it's odd, push to odds array
  for (var i = 0; i < array.length; ++i) {
    if (array[i]%2 !== 0) {
      odds.push(array[i]);
    }
  }
  //sort odds from smallest to largest
  odds.sort(function(a,b){
    return a-b;
  });
  
  //loop through array, replace any odd values with sorted odd values
  for (var j = 0; j < array.length; ++j) {
    if (array[j]%2 !== 0) {
      array[j] = odds.shift();
    }
  }
  
 return array;
}

--------------------------------------------------------------

Challenge 205

Given a string, write a function that returns the string with a question mark ("?") appends to the end, 
unless the original string ends with a question mark, in which case, returns the original string.

For example (Input --> Output)

"Yes" --> "Yes?" 
"No?" --> "No?"


Answer:

function ensureQuestion(s) {
  if(s[s.length - 1] === '?') {
    return s;
  } else {
    return s + '?'
  }
}

-------------------------------------------------------

Challenge 206


Given an array (arr) as an argument complete the function countSmileys that should return the total number of smiling faces.

Rules for a smiling face:

Each smiley face must contain a valid pair of eyes. Eyes can be marked as : or ;
A smiley face can have a nose but it does not have to. Valid characters for a nose are - or ~
Every smiling face must have a smiling mouth that should be marked with either ) or D
No additional characters are allowed except for those mentioned.

Valid smiley face examples: :) :D ;-D :~)
Invalid smiley faces: ;( :> :} :]

Example
countSmileys([':)', ';(', ';}', ':-D']);       // should return 2;
countSmileys([';D', ':-(', ':-)', ';~)']);     // should return 3;
countSmileys([';]', ':[', ';*', ':$', ';-D']); // should return 1;
Note
In case of an empty array return 0. You will not be tested with invalid input (input will always be an array). 
Order of the face (eyes, nose, mouth) elements will always be the same.


Answer:

function countSmileys(arr) {
  let result = [];
  
  for(let i = 0; i <= arr.length - 1; i++) {
    if(arr[i] === ':)' || arr[i] === ':D' || arr[i] === ';)' || arr[i] === ';D' || arr[i] === ':-)' || arr[i] === ':-D' 
    || arr[i] === ':~)' || arr[i] === ':~D' || arr[i] === ';-)' || arr[i] === ';-D' || arr[i] === ';~)' || arr[i] === ';~D') {
      result.push(arr[i]);
    }
  }
  return result.length;
}

----------------------------------------------------------------

Challenge 207

Write a function that takes an array of strings as an argument and returns a sorted array containing the same strings, 
ordered from shortest to longest.

For example, if this array were passed as an argument:

["Telescopes", "Glasses", "Eyes", "Monocles"]

Your function would return the following array:

["Eyes", "Glasses", "Monocles", "Telescopes"]

All of the strings in the array passed to your function will be different lengths, 
so you will not have to decide how to order multiple strings of the same length.


Answer:

function sortByLength (array) {
  return array.sort((a,b) => a.length - b.length);
};

----------------------------------------------------------

Challenge 208

Build Tower
Build a pyramid-shaped tower, as an array/list of strings, given a positive integer number of floors. A tower block is represented with "*" character.

For example, a tower with 3 floors looks like this:

[
  "  *  ",
  " *** ", 
  "*****"
]
And a tower with 6 floors looks like this:

[
  "     *     ", 
  "    ***    ", 
  "   *****   ", 
  "  *******  ", 
  " ********* ", 
  "***********"
]


Answer:

function towerBuilder(nFloors) {
    let space = [];
    let star = [];
    let tower = [];

    for(let i = 1; i <= nFloors; i++) {
        space = ' '.repeat(nFloors - i);
        star = '*'.repeat(2 * i - 1);
        tower.push(`${space}${star}${space}`);
    }
    return tower;
}

----------------------------------------------------------

Challenge 209

Write a function that takes a string of parentheses, and determines if the order of the parentheses is valid. 
The function should return true if the string is valid, and false if it's invalid.

Examples
"()"              =>  true
")(()))"          =>  false
"("               =>  false
"(())((()())())"  =>  true
Constraints
0 <= input.length <= 100


Answer:

function validParentheses(parens) {
  var result = 0;
  
  for (var i = 0 ; i < parens.length && result>= 0; i++) {
    result+= (parens[i] == '(') ? 1 : -1;    
  }
  
  return (result == 0);
}

------------------------------------------------------------

Challenge 210

My friend John and I are members of the "Fat to Fit Club (FFC)". 
John is worried because each month a list with the weights of members is published,
and each month he is the last on the list which means he is the heaviest.

I am the one who establishes the list so I told him: "Don't worry any more, I will modify the order of the list". 
It was decided to attribute a "weight" to numbers. The weight of a number will be from now on the sum of its digits.

For example 99 will have "weight" 18, 100 will have "weight" 1 so in the list 100 will come before 99.

Given a string with the weights of FFC members in normal order can you give this string ordered by "weights" of these numbers?

Example:
"56 65 74 100 99 68 86 180 90" ordered by numbers weights becomes: 

"100 180 90 56 65 74 68 86 99"
When two numbers have the same "weight", let us class them as if they were strings (alphabetical ordering) and not numbers:

180 is before 90 since, having the same "weight" (9), it comes before as a string.

All numbers in the list are positive numbers and the list can be empty.

Notes
it may happen that the input string have leading, trailing whitespaces and more than a unique whitespace between two consecutive numbers
For C: The result is freed.


Answer:

function sumOfParts(num) {
  return num.split('').reduce((a, b) => a + +b, 0)
}

function orderWeight(strng) {
    return strng.split(' ').sort((a, b) => sumOfParts(a) - sumOfParts(b) || a > b || -( a < b)).join(' ')
}

---------------------------------------------------------

Challenge 211

Assume "#" is like a backspace in string. This means that string "a#bc#d" actually is "bd"

Your task is to process a string with "#" symbols.

Examples
"abc#d##c"      ==>  "ac"
"abc##d######"  ==>  ""
"#######"       ==>  ""
""              ==>  ""


Answer:

function cleanString(s) {
    let result = [];

    let array = s.split('');

    for(let i = 0; i <= array.length - 1; i++) {
        if(array[i] !== '#') {
            result.push(array[i]);
        } else if(array[i] === '#') {
            result.pop();
        }
    }
    return result.join('');
}

--------------------------------------------------------------

Challenge 212

Return a new array consisting of elements which are multiple of their own index in input array (length > 1).

Some cases:
[22, -6, 32, 82, 9, 25] =>  [-6, 32, 25]

[68, -1, 1, -7, 10, 10] => [-1, 10]

[-56,-85,72,-26,-14,76,-27,72,35,-21,-67,87,0,21,59,27,-92,68] => [-85, 72, 0, 68]


Answer:

function multipleOfIndex(array) {
  let result = [];
  for (let i = 0; i <= array.length-1; i++){
    if (array[i] % i === 0){
      result.push(array[i]);
    }
  }
  return result;
}

--------------------------------------------------------------

Challenge 213

Filter the number
Oh, no! The number has been mixed up with the text. Your goal is to retrieve the number from the text, 
can you return the number back to its original state?

Task
Your task is to return a number from a string.

Details
You will be given a string of numbers and letters mixed up, you have to return all the numbers in that string in the order they occur.


Answer:

var filterString = function(value) {
  let filter = value.split('').filter(x => x >= '0' && x <= '9');
  
  filter = filter.map(Number).join('');
  
  return Number(filter);
}

---------------------------------------------------------------

Challenge 214

Tea for two!

Given a string or number, write a function tea42 that takes as input a string or number and returns a string where every '2' charcter 
or digit has been replaced with a t.

tea42('coffee') //should return 'coffee'
tea42('tea') //should return 'tea'
tea42('2ea') //should return 'tea'
tea42(9022) //should return '90tt'
tea42(5676765) //should return '5676765'
tea42('2u2u') //should return 'tutu'


Answer:

function tea42(input) {

    let result = [];
    
    for(let i = 0; i <= input.length - 1; i++) {
      if(input[i] === 2 || input[i] === '2') {
        result.push('t');
      } else {
        result.push(input[i]);
      }
    }
    console.log(result.join(''));
 };
 
 ----------------------------------------------------------------

Challenge 215

A palindrome is a word, phrase, number, or other sequence of symbols or elements, 
whose meaning may be interpreted the same way in either forward or reverse direction. 
Famous examples include "Amore, Roma", "A man, a plan, a canal: Panama" and "No 'x' in 'Nixon'". - wikipedia

Our goal is to determine whether or not a given string is a valid palindrome or not.

Like the above examples, here are a few test cases which are also populated:

"Amore, Roma" => valid
"A man, a plan, a canal: Panama" => valid
"No 'x' in 'Nixon'" => valid
"Abba Zabba, you're my only friend" => invalid

You can see that they are case insensitive and disregards non alphanumeric characters. 
In addition to a few predefined tests, your function will also be tested against a random string generator 50 times, 
which are guaranteed to produce valid palindromes.

Notes:

The empty string "" can be read forward or backward the same, it's a palindrome in our case.


Answer:

function palindrome(string) {
  if(string === '') {
    return true;
  }
  
  let result = [];
  
  let array = string.toLowerCase().split('');
  
  for(let i = 0; i <= array.length - 1; i++) {
    if(array[i] >= 'a' && array[i] <= 'z') {
      result.push(array[i]);
    }
  }
  if(result.reverse().join('') === result.join('')) {
    return true;
  } else {
    return false;
  }
};

-------------------------------------------------------------

Challenge 216

Task
The function pickIt accepts 1 parameter, arr, which is an array of numbers. We need to traverse arr by using a for loop. 
If an element is an odd number, push it to the odd array, and if it's an even number, push it to the evenarray.


Answer:

function pickIt(arr){
  var odd=[],even=[];
  for(let i = 0; i <= arr.length - 1; i++) {
    if(arr[i] % 2 === 0) {
      even.push(arr[i]);
    } else {
      odd.push(arr[i]);
    }
  }
  
  
  return [odd,even];
}

--------------------------------------------------------------

Challenge 217

You have function one_two (oneTwo for Java) that returns 1 or 2 with 50% chance. 
one_two is already defined in a global scope and can be called everywhere.

Your goal is to create function one_two_three (oneTwoThree for Java) that returns 1, 2 or 3 with equal probability 
using only one_two function.

Do not try to cheat returning repeating non-random sequences. There is randomness test especially for this case.


Answer:

function one_two_three() {
  return Math.ceil(Math.random() * 3);
}

----------------------------------------------------------

Challenge 218

Complete the solution so that the function will break up camel casing, using a space between words.

Example
"camelCasing"  =>  "camel Casing"
"identifier"   =>  "identifier"
""             =>  ""


Answer:

function solution(string) {
  let result = "";
  // loop on letter
  for (let letter of string) {
    // if letter is uppercase and not the first letter of the word add a space followed by the letter
    if (letter == letter.toUpperCase()) {
      result += ` ${letter}`;
    } else { // else just add the letter
      result += letter;
    }
  }
  return result;
}

---------------------------------------------------------

Challenge 219

Write a function reverse which reverses a list (or in clojure's case, any list-like data structure)

(the dedicated builtin(s) functionalities are deactivated)


Answer:

reverse = function(array) {
  let result = [];
  
  for(let i = array.length - 1; i >= 0; i--) {
    result.push(array[i])
  }
  return result;
}

-------------------------------------------------------------

Challenge 220

This Kata is intended as a small challenge for my students

All Star Code Challenge #18

Create a function that accepts 2 string arguments and returns an integer of the count of occurrences the 2nd argument is found in the first one.

If no occurrences can be found, a count of 0 should be returned.

("Hello", "o")  ==>  1
("Hello", "l")  ==>  2
("", "z")       ==>  0
Notes:

The first argument can be an empty string
The second string argument will always be of length 1


Answer:

function strCount(str, letter){  
  let result = 0;
  
  for(let i = 0; i <= str.length - 1; i++) {
    if(str[i] === letter) {
      result += 1;
    }
  }
  return result;
}

------------------------------------------------------------

Challenge 221

You love coffee and want to know what beans you can afford to buy it.

The first argument to your search function will be a number which represents your budget.

The second argument will be an array of coffee bean prices.

Your 'search' function should return the stores that sell coffee within your budget.

The search function should return a string of prices for the coffees beans you can afford. 
The prices in this string are to be sorted in ascending order.


Answer:

function search(budget, prices) {

let filter = prices.filter(x => x <= budget);
  
let sorted = filter.sort((a,b) => a - b);
  
return sorted.join(',');

}

--------------------------------------------------------------

Challenge 222

Create a method that accepts a list and an item, and returns true if the item belongs to the list, otherwise false.

function include(arr, item){
  return arr.includes(item) ? true : false;
}

---------------------------------------------------------------

Challenge 223

*** No Loops Allowed ***

You will be given an array a and a value x. All you need to do is check whether the provided array contains the value, without using a loop.

Array can contain numbers or strings. x can be either. Return true if the array contains the value, false if not. 
With strings you will need to account for case.


Answer:

function check(a, x) {
  return a.includes(x);
}

----------------------------------------------------------------

Challenge 224

Implement the function unique_in_order which takes as argument a sequence,
and returns a list of items without any elements with the same value next to each other and preserving the original order of elements.

For example:

uniqueInOrder('AAAABBBCCDAABBB') == ['A', 'B', 'C', 'D', 'A', 'B']
uniqueInOrder('ABBCcAD')         == ['A', 'B', 'C', 'c', 'A', 'D']
uniqueInOrder([1,2,2,3,3])       == [1,2,3]


Answer:

var uniqueInOrder=function(iterable){
  let result = [];
  
  for(let i = 0; i <= iterable.length - 1; i++) {
    if(iterable[i] !== iterable[i - 1]) {
      result.push(iterable[i]);
    };
  };
  return result;
};

---------------------------------------------------------------

Challenge 225

Task:
Leo's girlfriend asked him to buy a gift list during his next trip, now he wants to know how many of them will he be able to buy.

Write a function to help Leo out. The first parameter of the function is Leo's budget; the second one is an array containing the price of each gift. 
You should return an integer representing the maximum amount of gifts Leo can buy.

Example:
Maximum budget: 20
Gift List: [13, 2, 4, 6, 1]
Should return 4.

_ NOTE: All numbers will be integers >= 0, and the array will never be empty. _


Answer:

function howManyGifts(maxBudget, gifts){
  let sorted = gifts.sort((a,b) => a - b);
  
  let result = 0;
  let count = 0;
  
  for(let i = 0; i <= sorted.length - 1; i++) {
    if(result <= maxBudget && result + sorted[i] <= maxBudget) {
      result += sorted[i];
      count++;
    } else {
      return count;
    }
  }
  return count;
}

-------------------------------------------------------------------
